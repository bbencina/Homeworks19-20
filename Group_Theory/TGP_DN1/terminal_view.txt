gap> x:=70;;
gap> l:=AllSmallGroups(Size,96,IsAbelian,false);;
gap> G:=l[x];;
gap> Print("we see that G is ", StructureDescription(G));
we see that G is C8 x A4
gap>
gap> Print("1. exercise");
1. exercise
gap> Print("Pick a random 2-Sylow subgroup of G:");
Pick a random 2-Sylow subgroup of G:
gap> S:=SylowSubgroup(G,2);;
gap> Print(S);
Group( [ f1, f3, f4, f5, f6 ] )
gap> Print("How many 2-Sylow subgroups are there?");
How many 2-Sylow subgroups are there?
gap> num_2syl:=Index(G,Normalizer(G,S));;
gap> Print(num_2syl);
1
gap> Print("All of them are: ");
All of them are:
gap> ccs:=ConjugacyClassSubgroups(G,S);;
gap> all_2syl:=Elements(ccs);;
gap> Print(all_2syl);
[ Group( [ f1, f3, f4, f5, f6 ] ) ]
gap>
gap> Print("2. exercise");
2. exercise
gap> Print("We calculate the composition series of G: ");
We calculate the composition series of G:
gap> cs:=CompositionSeries(G);;
gap> Print(cs);
[ Group( [ f1, f2, f3, f4, f5, f6 ] ), Group( [ f2, f3, f4, f5, f6 ] ), Group( [ f3, f4, f5, f6 ] ),
  Group( [ f4, f5, f6 ] ), Group( [ f5, f6 ] ), Group( [ f6 ] ), Group( <identity> of ... ) ]
gap> Print("To get all composition factors and prettify the result: ");
To get all composition factors and prettify the result:
gap> Print(List([1..Length(cs)-1], i -> StructureDescription(cs[i]/cs[i+1])));
[ "C2", "C3", "C2", "C2", "C2", "C2" ]
gap>
gap> Print("3. exercise");
3. exercise
gap> N:=AbelianGroup([2,2]);;
gap> Print("N = ", StructureDescription(N));
N = C2 x C2
gap> Print("All homomorphisms G -> Aut(N): ");
All homomorphisms G -> Aut(N):
gap> homos:=AllHomomorphisms(G,AutomorphismGroup(N));;
gap> Print(homos);
[ Pcgs([ f1, f2, f3, f4, f5, f6 ]) -> [ IdentityMapping( Group( [ f1, f2 ] ) ), IdentityMapping( Group( [ f1, f2 ] ) )
        , IdentityMapping( Group( [ f1, f2 ] ) ), IdentityMapping( Group( [ f1, f2 ] ) ),
      IdentityMapping( Group( [ f1, f2 ] ) ), IdentityMapping( Group( [ f1, f2 ] ) ) ],
  Pcgs([ f1, f2, f3, f4, f5, f6 ]) -> [ Pcgs([ f1, f2 ]) -> [ f1*f2, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ],
      Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ], IdentityMapping( Group( [ f1, f2 ] ) ),
      Pcgs([ f1, f2 ]) -> [ f1, f2 ] ], Pcgs([ f1, f2, f3, f4, f5, f6 ]) -> [ Pcgs([ f1, f2 ]) -> [ f1, f1*f2 ],
      Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ],
      Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ] ], Pcgs([ f1, f2, f3, f4, f5, f6 ]) ->
    [ Pcgs([ f1, f2 ]) -> [ f2, f1 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ],
      Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ] ],
  Pcgs([ f1, f2, f3, f4, f5, f6 ]) -> [ Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f2, f1*f2 ],
      Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ], IdentityMapping( Group( [ f1, f2 ] ) ),
      Pcgs([ f1, f2 ]) -> [ f1, f2 ] ], Pcgs([ f1, f2, f3, f4, f5, f6 ]) -> [ Pcgs([ f1, f2 ]) -> [ f1, f2 ],
      Pcgs([ f1, f2 ]) -> [ f1*f2, f1 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ],
      Pcgs([ f1, f2 ]) -> [ f1, f2 ], Pcgs([ f1, f2 ]) -> [ f1, f2 ] ] ]
gap> Print("We now use the semidirect product to construct the following groups: ");
We now use the semidirect product to construct the following groups:
gap> sdp_grp_lst:=List([1..Length(homos)], i -> IdGroup(SemidirectProduct(G, homos[i], N)));;
gap> Print(sdp_grp_lst);;
[ [ 384, 18200 ], [ 384, 5803 ], [ 384, 5803 ], [ 384, 5803 ], [ 384, 18240 ], [ 384, 18240 ] ]
gap> Print("There are: ", Length(sdp_grp_lst));
There are: 6
gap> Print("There may be some isomorphic.");
There may be some isomorphic.
gap> non_iso:=Set(sdp_grp_lst);;
gap> Print("These are non-isomorphic groups: ");
These are non-isomorphic groups:
gap> Print(non_iso);
[ [ 384, 5803 ], [ 384, 18200 ], [ 384, 18240 ] ]
gap> Print("There are: " , Length(non_iso));
There are: 3
gap> Print("For better visualization one can again use StructureDescription.");
For better visualization one can again use StructureDescription.
gap>
gap> Print("4. exercise");
4. exercise
gap> Print("Get all groups of size 64 (surpress the output)");
Get all groups of size 64 (surpress the output)
gap> grp_64:=AllSmallGroups(64);;
gap> Print("Let's now inspect the size of the minimal generating set and index of Frattini's subgroup");
Let's now inspect the size of the minimal generating set and index of Frattini's subgroup
gap> Print(List([1..Length(grp_64)], i -> [Size(MinimalGeneratingSet(grp_64[i])),Index(grp_64[i],FrattiniSubgroup(grp_64[i]))]));
[ [ 1, 2 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ],
  [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ],
  [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ],
  [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ],
  [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 2, 4 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ],
  [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 3, 8 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ],
  [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ],
  [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ],
  [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ],
  [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ],
  [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ],
  [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ], [ 4, 16 ],
  [ 4, 16 ], [ 4, 16 ], [ 5, 32 ], [ 5, 32 ], [ 5, 32 ], [ 5, 32 ], [ 5, 32 ], [ 5, 32 ], [ 5, 32 ], [ 6, 64 ] ]
gap> Print("What we see are pairs of numbers [n, 2^n], starting at n = 1");
What we see are pairs of numbers [n, 2^n], starting at n = 1
gap> Print("Does something similar hold for groups of order 192?");
Does something similar hold for groups of order 192?
gap> Print("Get all groups of size 192 (surpress the output)");
Get all groups of size 192 (surpress the output)
gap> grp_192:=AllSmallGroups(192);;
gap> Print(List([1..Length(grp_192)], i -> [Size(MinimalGeneratingSet(grp_192[i])),Index(grp_192[i],FrattiniSubgroup(grp_192[i]))]));
[ [ 2, 6 ], [ 1, 6 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ],
  [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 12 ], [ 2, 24 ],
  [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ],
  [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ],
  [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 2, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 3, 24 ],
  [ 3, 24 ], [ 3, 24 ], [ 3, 24 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ],
  [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ],
  [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ],
  [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ],
  [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ],
  [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ],
  [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ],
  [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 2, 48 ], [ 3, 48 ],
  [ 3, 48 ], [ 3, 48 ], [ 3, 48 ], [ 3, 48 ], [ 3, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ],
  [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 4, 48 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ],
  [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ],
  [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 2, 96 ], [ 2, 96 ],
  [ 2, 96 ], [ 2, 96 ], [ 2, 96 ], [ 2, 96 ], [ 2, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ],
  [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 3, 96 ], [ 5, 96 ],
  [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ],
  [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ],
  [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 5, 96 ], [ 4, 192 ], [ 2, 192 ], [ 4, 192 ], [ 3, 192 ],
  [ 4, 192 ], [ 6, 192 ], [ 6, 192 ] ]
gap> Print("We notice a couple of things:");
We notice a couple of things:
gap> Print("Firstly, index of Frattini's subgroup is always 3*2^k for some k,");
Firstly, index of Frattini's subgroup is always 3*2^k for some k,
gap> Print("secondly, the k is more often than not the same as the minimal generator set size.");
secondly, the k is more often than not the same as the minimal generator set size.
gap> Print("That is, in most cases the pairs look like [k, 3*2^k].");
That is, in most cases the pairs look like [k, 3*2^k].
gap> Print("HOWEVER, there exist border cases and not so few of them.");
HOWEVER, there exist border cases and not so few of them.
gap> Print("We see pairs such as [2, 48], [3, 48], [2, 24], [2, 6].");
We see pairs such as [2, 48], [3, 48], [2, 24], [2, 6].
gap> Print("We now conclude that all pairs are of form [j, 3*2^k] for some j <= k with one exception of [2, 6].");
We now conclude that all pairs are of form [j, 3*2^k] for some j <= k with one exception of [2, 6].
gap>
